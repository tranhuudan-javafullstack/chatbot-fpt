services:
  react-frontend:
    build:
      context: ..
      dockerfile: be/Dockerfile2
    restart: unless-stopped
    depends_on:
      fastapi-backend:
        condition: service_healthy
    volumes:
      - '../fe:/app'
      - '/app/node_modules'
    ports:
      - 3001:3001
    networks:
      - chatbot
  fastapi-backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8068/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8068:8068"
    env_file:
      - .env
    networks:
      - chatbot
    volumes:
      - ".:/usr/srv"
  minio:
    image: minio/minio
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - chatbot
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_ACCESS_KEY}
      MINIO_CACHE_QUOTA: 80 # 80% of the drive will be used for caching
      MINIO_CACHE_AFTER: 1 # Object will be cached after the first request to it
      MINIO_CACHE_WATERMARK_LOW: 70 # Least accessed objects will be erased after the cache disk reaches the 70% watermark
      MINIO_CACHE_WATERMARK_HIGH: 90
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_CACHE=: "on"
      MINIO_CACHE_DRIVES: /mnt/drive1,/mnt/drive2
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
  minio-bucket:
    image: minio/mc
    restart: on-failure:3
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - chatbot
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      mc alias set ${MINIO_ALIAS} ${MINIO_HOST_URL} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      mc mb --ignore-existing ${MINIO_ALIAS}/${MINIO_BUCKET};
      mc anonymous set ${MINIO_POLICY} ${MINIO_ALIAS}/${MINIO_BUCKET};
      exit 0;
      "
  redis-exporter:
    image: oliver006/redis_exporter
    ports:
      - 9121:9121
    environment:
      REDIS_ADDR: ${REDIS_ADDR}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # REDIS_USER có thể bị bỏ qua nếu không dùng ACL
      # REDIS_USER: ${REDIS_USER}
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - chatbot
    depends_on:
      - redis
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    env_file:
      - .env
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    networks:
      - chatbot
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
  redis-insight:
    image: redis/redisinsight:latest
    restart: unless-stopped
    ports:
      - "5540:5540"
    volumes:
      - redis-insight:/data
    depends_on:
      - redis
  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    image: semitechnologies/weaviate:1.25.6
    ports:
      - "8080:8080"
      - "50051:50051"
    restart: unless-stopped
    environment:
      LOG_LEVEL: debug
      LIMIT_RESOURCES: 'true'
      PROMETHEUS_MONITORING_PORT: 2112
      PROMETHEUS_MONITORING_ENABLED: 'true'
      QUERY_DEFAULTS_LIMIT: 25
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      CLUSTER_HOSTNAME: 'node1'
      ASYNC_INDEXING: 'true'
      AUTOSCHEMA_ENABLED: 'true'
      REINDEX_SET_TO_ROARINGSET_AT_STARTUP: 'true'
      USE_SENTENCE_TRANSFORMERS_VECTORIZER: 'true'
      HNSW_STARTUP_WAIT_FOR_VECTOR_CACHE: 'true'
      ENABLE_MODULES: 'text2vec-openai'
      DEFAULT_VECTORIZER_MODULE: 'none'
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      #      AUTHENTICATION_APIKEY_ENABLED: 'true'
      #      AUTHENTICATION_APIKEY_ALLOWED_KEYS: 'user-a-key,user-b-key'
      #      AUTHENTICATION_APIKEY_USERS: 'user-a,user-b'
      #      AUTHORIZATION_ENABLE_RBAC: 'true'
      #      AUTHORIZATION_RBAC_ROOT_USERS: 'user-a'
    volumes:
      - weaviate-data:/var/lib/weaviate
    networks:
      - chatbot
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/v1/.well-known/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  prometheus:
    image: prom/prometheus:v2.46.0
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    depends_on:
      weaviate:
        condition: service_healthy
      redis-exporter:
        condition: service_started
      fastapi-backend:
        condition: service_started
      mongodb-exporter:
        condition: service_started
    networks:
      - chatbot
  grafana:
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/prometheus.yml
      - ./grafana/dashboard_provider.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - chatbot
  mongodb-exporter:
    image: percona/mongodb_exporter:0.40
    restart: unless-stopped
    ports:
      - "9216:9216"
    command: >
      --mongodb.global-conn-pool 
      --collector.diagnosticdata 
      --discovering-mode 
      --compatible-mode 
      --mongodb.collstats-colls=admin.companies,admin.restaurants
    networks:
      - chatbot
    env_file:
      - .env
    environment:
      WAIT_HOSTS: mongodb:27017
      MONGODB_URI: ${MONGO_CONNECTION_STRING}
    depends_on:
      mongodb:
        condition: service_healthy
  mongodb:
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./mongodb/mongod.conf:/etc/mongod.conf
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    command: >
      --auth
      --profile 2 
      --slowms 15 
      --slowOpSampleRate 0.5
    networks:
      - chatbot
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  chatbot:
    driver: bridge

volumes:
  minio-data:
  redis-insight:
  mongodb-data:
  prometheus-data:
  weaviate-data:
  grafana-data: