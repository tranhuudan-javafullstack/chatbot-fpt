{"ast":null,"code":"var _jsxFileName = \"/Users/huudan/Development/chatbot.com/fe/src/components/chat_area/ChatArea.js\",\n  _s = $RefreshSig$();\nimport InputChat from \"../input_chat/InputChat\";\nimport \"./ChatArea.scss\";\nimport ChatMessageItem from \"../chat_message_item/ChatMessageItem\";\nimport { useEffect, useRef, useState } from \"react\";\nimport knowledgeImage from \"../../assets/images/dataset_text.png\";\nimport SelectedKnowledgeModal from \"../selected_knowledge_modal/SelectedKnowledgeModal\";\nimport { createQueryBot, getKnowledgeInBot } from \"../../services/ChatBotService\";\nimport { useParams } from \"react-router-dom\";\nimport { decryptToken } from \"../../utils/Functions\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatArea({\n  chats,\n  fetChats,\n  showContext\n}) {\n  _s();\n  const {\n    botId,\n    chatId\n  } = useParams();\n  const [showSideBar, setShowSideBar] = useState(false);\n  const [prompt, setPrompt] = useState('');\n  const textareaRef = useRef(null);\n  const [showAddKnowledge, setShowAddKnowledge] = useState(false);\n  const accessToken = decryptToken(localStorage.getItem('access_token'));\n  const [knowledges, setKnowledges] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const urlServer = `ws://localhost:8068/ws/chats/${chatId}/generate_stream`;\n  const clientRef = useRef(null);\n  const [chatsRender, setChatsRender] = useState([]);\n  const [isProcess, setIsProcess] = useState(false);\n  const [isDone, setIsDone] = useState(true);\n  const scrollTargetRef = useRef(null);\n  const [displayedText, setDisplayedText] = useState('');\n  const [tempText, setTempText] = useState(\"\");\n  useEffect(() => {\n    fetchKnowledgeInBot();\n    // if (scrollTargetRef.current) {\n    //     scrollTargetRef.current.scrollIntoView({behavior: 'smooth'});\n    // }\n    console.log(\"CHATS\", chats);\n    // const transformedChats = Array.from(chats).map(chat => ({\n    //     query_id: chat.query_id,\n    //     content: chat.question.content,\n    //     role: chat.question.role\n    // }));\n    const transformedChats = Array.from(chats).flatMap(chat => [{\n      query_id: chat.query_id,\n      content: chat.question.content,\n      role: chat.question.role,\n      token: 0,\n      totalTime: 0\n    }, {\n      query_id: chat.query_id,\n      content: chat.answer.content,\n      role: \"bot\",\n      token: chat.answer.completion_token,\n      totalTime: chat.answer.total_time\n      // role: chat.answer.role\n    }]);\n    setChatsRender(transformedChats);\n    if (textareaRef.current) {\n      // textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [chatId, chats]);\n  useEffect(() => {\n    if (scrollTargetRef.current) {\n      scrollTargetRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chats]);\n  const displayTextCharacterByCharacter = text => {\n    let index = -1;\n    setDisplayedText(\"\");\n    const interval = setInterval(() => {\n      if (index < text.length) {\n        setDisplayedText(prev => prev + text.charAt(index));\n        index++;\n      } else {\n        clearInterval(interval);\n        setIsDone(true);\n        fetChats();\n        setDisplayedText(\"\");\n      }\n    }, 30);\n  };\n  const callAPIGenerationText = query => {\n    clientRef.current = new W3CWebSocket(urlServer);\n    clientRef.current.onopen = () => {\n      console.log('WebSocket connection opened');\n      clientRef.current.send(JSON.stringify(query));\n    };\n    let fullText = \"\";\n    clientRef.current.onmessage = message => {\n      console.log(\"Message received:\", message.data);\n      const dataFromServer = JSON.parse(message.data);\n      if (dataFromServer.finish_reason == 'stop') {\n        console.log(\"MMMMMMMMMMMMMMMMMM\", fullText);\n        displayTextCharacterByCharacter(fullText);\n        setChatsRender(prevChatsRender => {\n          if (prevChatsRender.length > 0) {\n            const updatedChats = [...prevChatsRender];\n            const chatBot = updatedChats[updatedChats.length - 1];\n            chatBot.content = fullText;\n            return [...prevChatsRender.slice(0, -1), chatBot];\n          } else {\n            console.error(\"No chats available to update.\");\n          }\n          return prevChatsRender;\n        });\n        return;\n      }\n      fullText = dataFromServer.full_text;\n    };\n    clientRef.current.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    clientRef.current.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n  };\n  const fetchKnowledgeInBot = async () => {\n    try {\n      const data = await getKnowledgeInBot(accessToken, botId);\n      setKnowledges(data.knowledges);\n      setIsLoading(false);\n    } catch (error) {\n      console.error('Error fetching chat:', error.message);\n    }\n  };\n  const toggleShowAddKnowledge = () => {\n    setShowAddKnowledge(!showAddKnowledge);\n    if (showSideBar) toggleShowSidebar();\n  };\n  const handleChange = e => {\n    setPrompt(e.target.value);\n  };\n  const toggleShowSidebar = () => {\n    setShowSideBar(!showSideBar);\n  };\n  const handleSendMessage = async message => {\n    if (!isDone) return;\n    setIsDone(false);\n    const newMessage = {\n      query_id: uuidv4(),\n      content: message,\n      role: \"user\"\n    };\n    setChatsRender(prevChats => [...prevChats, newMessage]);\n    setIsProcess(true);\n    const newChatBot = {\n      query_id: uuidv4(),\n      content: \"\",\n      role: \"bot\"\n    };\n    setChatsRender(prevChats => [...prevChats, newChatBot]);\n    try {\n      const data = await createQueryBot(botId, chatId, message, accessToken);\n      callAPIGenerationText(data);\n      setIsProcess(false);\n    } catch (error) {\n      console.error('Error creating bot:', error.message);\n    }\n  };\n  const handleDeleteKnowledge = id => {\n    const newKnowledge = knowledges.filter(knowledge => knowledge.knowledge_id != id);\n    setKnowledges(newKnowledge);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat_area ${showContext ? \"\" : \"chat_area--full\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_area__title\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Chat Interface\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: toggleShowSidebar,\n          className: \"side_bar_ic\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-layout-sidebar-reverse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_area__message\",\n        children: Array.from(chatsRender).map((chat, index) => {\n          return /*#__PURE__*/_jsxDEV(ChatMessageItem, {\n            totalTime: chat.totalTime,\n            token: chat.token,\n            ref: chatsRender.length - 1 === index ? scrollTargetRef : null,\n            message: !isDone && index == chatsRender.length - 1 && chat.role != \"user\" ? displayedText : chat.content,\n            mySelf: chat.role == \"user\",\n            isProcess: isProcess\n          }, chat.query_id + uuidv4(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this), knowledges.length == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message_noti\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Vui l\\xF2ng th\\xEAm ki\\u1EBFn th\\u1EE9c cho t\\xF4i tr\\u01B0\\u1EDBc khi h\\u1ECFi.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 39\n      }, this) : /*#__PURE__*/_jsxDEV(InputChat, {\n        sendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `side_bar__container ${showSideBar ? \"side_bar__container--show\" : \"\"} `,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side_bar_item__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"side_bar_item__title\",\n            children: \"Persona & Prompt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input_prompt\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              ref: textareaRef,\n              placeholder: \"Design the bot's persona\",\n              value: prompt,\n              onChange: handleChange,\n              rows: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side_bar_item__container side_bar_item__container--max\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"side_bar_item__header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"side_bar_item__title\",\n              children: \"Danh s\\xE1ch ki\\u1EBFn th\\u1EE9c\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: toggleShowAddKnowledge,\n              title: \"Add knowledge\",\n              className: \"ic_add\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"bi bi-plus\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"knowledge__container\",\n            children: Array.from(knowledges).map((knowledge, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"knowledge_item\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"knowledge_img\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: knowledgeImage,\n                    alt: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"knowledge__content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"knowledge_title\",\n                    children: knowledge.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"knowledge_description\",\n                    children: knowledge.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 208,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 37\n                }, this)]\n              }, knowledge.knowledge_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), showAddKnowledge && /*#__PURE__*/_jsxDEV(SelectedKnowledgeModal, {\n      botId: botId,\n      deleteKnowledge: handleDeleteKnowledge,\n      addKnowledge: setKnowledges,\n      knowledges: knowledges,\n      toggleShowModal: toggleShowAddKnowledge\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 34\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatArea, \"g/mE+YC6jH3tHSPF75DtFgesHeo=\", false, function () {\n  return [useParams];\n});\n_c = ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["InputChat","ChatMessageItem","useEffect","useRef","useState","knowledgeImage","SelectedKnowledgeModal","createQueryBot","getKnowledgeInBot","useParams","decryptToken","w3cwebsocket","W3CWebSocket","v4","uuidv4","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","chats","fetChats","showContext","_s","botId","chatId","showSideBar","setShowSideBar","prompt","setPrompt","textareaRef","showAddKnowledge","setShowAddKnowledge","accessToken","localStorage","getItem","knowledges","setKnowledges","isLoading","setIsLoading","urlServer","clientRef","chatsRender","setChatsRender","isProcess","setIsProcess","isDone","setIsDone","scrollTargetRef","displayedText","setDisplayedText","tempText","setTempText","fetchKnowledgeInBot","console","log","transformedChats","Array","from","flatMap","chat","query_id","content","question","role","token","totalTime","answer","completion_token","total_time","current","style","height","scrollHeight","scrollIntoView","behavior","displayTextCharacterByCharacter","text","index","interval","setInterval","length","prev","charAt","clearInterval","callAPIGenerationText","query","onopen","send","JSON","stringify","fullText","onmessage","message","data","dataFromServer","parse","finish_reason","prevChatsRender","updatedChats","chatBot","slice","error","full_text","onerror","onclose","toggleShowAddKnowledge","toggleShowSidebar","handleChange","e","target","value","handleSendMessage","newMessage","prevChats","newChatBot","handleDeleteKnowledge","id","newKnowledge","filter","knowledge","knowledge_id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","ref","mySelf","sendMessage","placeholder","onChange","rows","title","src","alt","name","description","deleteKnowledge","addKnowledge","toggleShowModal","_c","$RefreshReg$"],"sources":["/Users/huudan/Development/chatbot.com/fe/src/components/chat_area/ChatArea.js"],"sourcesContent":["import InputChat from \"../input_chat/InputChat\";\nimport \"./ChatArea.scss\";\nimport ChatMessageItem from \"../chat_message_item/ChatMessageItem\";\nimport {useEffect, useRef, useState} from \"react\";\nimport knowledgeImage from \"../../assets/images/dataset_text.png\";\nimport SelectedKnowledgeModal from \"../selected_knowledge_modal/SelectedKnowledgeModal\";\nimport {createQueryBot, getKnowledgeInBot} from \"../../services/ChatBotService\";\nimport {useParams} from \"react-router-dom\";\nimport {decryptToken} from \"../../utils/Functions\";\nimport {w3cwebsocket as W3CWebSocket} from \"websocket\";\nimport {v4 as uuidv4} from 'uuid';\n\n\nexport default function ChatArea({chats, fetChats, showContext}) {\n    const { botId, chatId } = useParams();\n    const [showSideBar, setShowSideBar] = useState(false);\n    const [prompt, setPrompt] = useState('');\n    const textareaRef = useRef(null);\n    const [showAddKnowledge, setShowAddKnowledge] = useState(false);\n    const accessToken = decryptToken(localStorage.getItem('access_token'));\n    const [knowledges, setKnowledges] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const urlServer = `ws://localhost:8068/ws/chats/${chatId}/generate_stream`;\n    const clientRef = useRef(null);\n    const [chatsRender, setChatsRender] = useState([]);\n    const [isProcess, setIsProcess] = useState(false);\n    const [isDone, setIsDone] = useState(true);\n    const scrollTargetRef = useRef(null);\n    const [displayedText, setDisplayedText] = useState('');\n    const [tempText, setTempText] = useState(\"\");\n    useEffect(() => {\n        fetchKnowledgeInBot();\n        // if (scrollTargetRef.current) {\n        //     scrollTargetRef.current.scrollIntoView({behavior: 'smooth'});\n        // }\n        console.log(\"CHATS\", chats)\n        // const transformedChats = Array.from(chats).map(chat => ({\n        //     query_id: chat.query_id,\n        //     content: chat.question.content,\n        //     role: chat.question.role\n        // }));\n        const transformedChats = Array.from(chats).flatMap(chat => [\n            {\n                query_id: chat.query_id,\n                content: chat.question.content,\n                role: chat.question.role,\n                token: 0,\n                totalTime: 0,\n            },\n            {\n                query_id: chat.query_id,\n                content: chat.answer.content,\n                role: \"bot\",\n                token: chat.answer.completion_token,\n                totalTime: chat.answer.total_time,\n                // role: chat.answer.role\n            }\n        ]);\n        setChatsRender(transformedChats);\n        if (textareaRef.current) {\n            // textareaRef.current.style.height = 'auto';\n            textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n        }\n    }, [chatId,chats]);\n    useEffect(() => {\n        if (scrollTargetRef.current) {\n            scrollTargetRef.current.scrollIntoView({behavior: 'smooth'});\n        }\n    }, [chats]);\n    const displayTextCharacterByCharacter = (text) => {\n        let index = -1;\n        setDisplayedText(\"\");\n        const interval = setInterval(() => {\n            if (index < text.length) {\n                setDisplayedText((prev) => prev + text.charAt(index));\n                index++;\n            } else {\n                clearInterval(interval);\n                setIsDone(true);\n                fetChats();\n                setDisplayedText(\"\");\n            }\n        }, 30);\n    };\n    const callAPIGenerationText = (query) => {\n        clientRef.current = new W3CWebSocket(urlServer);\n        clientRef.current.onopen = () => {\n            console.log('WebSocket connection opened');\n            clientRef.current.send(JSON.stringify(query));\n        };\n        let fullText = \"\";\n        clientRef.current.onmessage = (message) => {\n            console.log(\"Message received:\", message.data);\n            const dataFromServer = JSON.parse(message.data);\n            if(dataFromServer.finish_reason == 'stop') {\n                console.log(\"MMMMMMMMMMMMMMMMMM\", fullText);\n                displayTextCharacterByCharacter(fullText);\n                setChatsRender((prevChatsRender) => {\n                    if (prevChatsRender.length > 0) {\n                        const updatedChats = [...prevChatsRender];\n                        const chatBot = updatedChats[updatedChats.length - 1];\n                        chatBot.content = fullText;\n                        return [...prevChatsRender.slice(0, -1), chatBot];\n                    } else {\n                        console.error(\"No chats available to update.\");\n                    }\n                    return prevChatsRender;\n                });\n                return;\n            }\n            fullText = dataFromServer.full_text\n        };\n\n        clientRef.current.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        clientRef.current.onclose = () => {\n            console.log('WebSocket connection closed');\n        };\n    }\n\n    const fetchKnowledgeInBot = async () => {\n        try {\n            const data = await getKnowledgeInBot(accessToken, botId);\n            setKnowledges(data.knowledges);\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error fetching chat:', error.message);\n        }\n    };\n    const toggleShowAddKnowledge = () => {\n        setShowAddKnowledge(!showAddKnowledge);\n        if(showSideBar) toggleShowSidebar();\n    }\n    const handleChange = (e) => {\n        setPrompt(e.target.value);\n    };\n    const toggleShowSidebar = () => {\n        setShowSideBar(!showSideBar);\n    }\n    const handleSendMessage = async (message) => {\n        if (!isDone) return;\n        setIsDone(false);\n        const newMessage = {\n            query_id: uuidv4(),\n            content: message,\n            role: \"user\",\n        };\n        setChatsRender((prevChats) => [...prevChats, newMessage]);\n        setIsProcess(true);\n        const newChatBot = {\n            query_id: uuidv4(),\n            content: \"\",\n            role: \"bot\",\n        };\n        setChatsRender((prevChats) => [...prevChats, newChatBot]);\n        try {\n            const data = await createQueryBot(botId, chatId, message, accessToken);\n            callAPIGenerationText(data);\n            setIsProcess(false);\n        } catch (error) {\n            console.error('Error creating bot:', error.message);\n        }\n    }\n    const handleDeleteKnowledge = (id) => {\n        const newKnowledge = knowledges.filter(knowledge => knowledge.knowledge_id != id);\n        setKnowledges(newKnowledge);\n    }\n    return(\n        <>\n        <div className={`chat_area ${showContext ? \"\" : \"chat_area--full\"}`}>\n            <div className=\"chat_area__title\">\n                <span>Chat Interface</span>\n                <div onClick={toggleShowSidebar} className=\"side_bar_ic\">\n                    <i className=\"bi bi-layout-sidebar-reverse\"></i>\n                </div>\n            </div>\n            <div className=\"chat_area__message\">\n                {Array.from(chatsRender).map((chat, index)=> {\n                    return <ChatMessageItem totalTime={chat.totalTime} token={chat.token} ref={chatsRender.length - 1 === index ? scrollTargetRef : null}  key={chat.query_id + uuidv4()} message={!isDone && index == (chatsRender.length - 1) && chat.role!=\"user\" ? displayedText : chat.content} mySelf={chat.role==\"user\"} isProcess={isProcess}/>\n                })}\n            </div>\n            {knowledges.length == 0 ? <div className={\"message_noti\"}>\n                <span>Vui lòng thêm kiến thức cho tôi trước khi hỏi.</span>\n                </div> :  <InputChat sendMessage={handleSendMessage}/>}\n            <div className={`side_bar__container ${showSideBar ? \"side_bar__container--show\":\"\"} `}>\n                <div className=\"side_bar_item__container\">\n                    <span className=\"side_bar_item__title\">Persona & Prompt</span>\n                    <div className={\"input_prompt\"}><textarea ref={textareaRef} placeholder={\"Design the bot's persona\"} value={prompt} onChange={handleChange}\n                                                              rows={1}/></div>\n                </div>\n                <div className=\"side_bar_item__container side_bar_item__container--max\">\n                    <div className=\"side_bar_item__header\">\n                        <span className=\"side_bar_item__title\">Danh sách kiến thức</span>\n                        <div onClick={toggleShowAddKnowledge} title={\"Add knowledge\"} className=\"ic_add\">\n                            <i className=\"bi bi-plus\"></i>\n                        </div>\n                    </div>\n                    <div className=\"knowledge__container\">\n                        {Array.from(knowledges).map((knowledge, index)=> {\n                                return <div key={knowledge.knowledge_id} className=\"knowledge_item\">\n                                    <div className=\"knowledge_img\">\n                                        <img src={knowledgeImage} alt=\"\"/>\n                                    </div>\n                                    <div className=\"knowledge__content\">\n                                        <span className=\"knowledge_title\">{knowledge.name}</span>\n                                        <span className=\"knowledge_description\">{knowledge.description}</span>\n                                    </div>\n                                </div>\n                        })}\n                    </div>\n                </div>\n            </div>\n    </div>\n            {showAddKnowledge && <SelectedKnowledgeModal botId={botId} deleteKnowledge={handleDeleteKnowledge} addKnowledge={setKnowledges} knowledges={knowledges} toggleShowModal={toggleShowAddKnowledge}/>}\n        </>)\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}