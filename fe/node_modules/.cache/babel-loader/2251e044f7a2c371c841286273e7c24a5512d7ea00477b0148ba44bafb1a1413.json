{"ast":null,"code":"import InputChat from\"../input_chat/InputChat\";import\"./ChatArea.scss\";import ChatMessageItem from\"../chat_message_item/ChatMessageItem\";import{useEffect,useRef,useState}from\"react\";import knowledgeImage from\"../../assets/images/dataset_text.png\";import SelectedKnowledgeModal from\"../selected_knowledge_modal/SelectedKnowledgeModal\";import{createQueryBot,getKnowledgeInBot}from\"../../services/ChatBotService\";import{useParams}from\"react-router-dom\";import{decryptToken}from\"../../utils/Functions\";import{w3cwebsocket as W3CWebSocket}from\"websocket\";import{v4 as uuidv4}from'uuid';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function ChatArea(_ref){let{chats,fetChats,showContext}=_ref;const{botId,chatId}=useParams();const[showSideBar,setShowSideBar]=useState(false);const[prompt,setPrompt]=useState('');const textareaRef=useRef(null);const[showAddKnowledge,setShowAddKnowledge]=useState(false);const accessToken=decryptToken(localStorage.getItem('access_token'));const[knowledges,setKnowledges]=useState([]);const[isLoading,setIsLoading]=useState(true);const urlServer=\"ws://localhost:8068/ws/chats/\".concat(chatId,\"/generate_stream\");const clientRef=useRef(null);const[chatsRender,setChatsRender]=useState([]);const[isProcess,setIsProcess]=useState(false);const[isDone,setIsDone]=useState(true);const scrollTargetRef=useRef(null);const[displayedText,setDisplayedText]=useState('');const[tempText,setTempText]=useState(\"\");useEffect(()=>{fetchKnowledgeInBot();// if (scrollTargetRef.current) {\n//     scrollTargetRef.current.scrollIntoView({behavior: 'smooth'});\n// }\nconsole.log(\"CHATS\",chats);// const transformedChats = Array.from(chats).map(chat => ({\n//     query_id: chat.query_id,\n//     content: chat.question.content,\n//     role: chat.question.role\n// }));\nconst transformedChats=Array.from(chats).flatMap(chat=>[{query_id:chat.query_id,content:chat.question.content,role:chat.question.role,token:0,totalTime:0},{query_id:chat.query_id,content:chat.answer.content,role:\"bot\",token:chat.answer.completion_token,totalTime:chat.answer.total_time// role: chat.answer.role\n}]);setChatsRender(transformedChats);if(textareaRef.current){// textareaRef.current.style.height = 'auto';\ntextareaRef.current.style.height=\"\".concat(textareaRef.current.scrollHeight,\"px\");}},[chatId,chats]);useEffect(()=>{if(scrollTargetRef.current){scrollTargetRef.current.scrollIntoView({behavior:'smooth'});}},[chats]);const displayTextCharacterByCharacter=text=>{let index=-1;setDisplayedText(\"\");const interval=setInterval(()=>{if(index<text.length){setDisplayedText(prev=>prev+text.charAt(index));index++;}else{clearInterval(interval);setIsDone(true);fetChats();setDisplayedText(\"\");}},30);};const callAPIGenerationText=query=>{clientRef.current=new W3CWebSocket(urlServer);clientRef.current.onopen=()=>{console.log('WebSocket connection opened');clientRef.current.send(JSON.stringify(query));};let fullText=\"\";clientRef.current.onmessage=message=>{console.log(\"Message received:\",message.data);const dataFromServer=JSON.parse(message.data);if(dataFromServer.finish_reason=='stop'){console.log(\"MMMMMMMMMMMMMMMMMM\",fullText);displayTextCharacterByCharacter(fullText);setChatsRender(prevChatsRender=>{if(prevChatsRender.length>0){const updatedChats=[...prevChatsRender];const chatBot=updatedChats[updatedChats.length-1];chatBot.content=fullText;return[...prevChatsRender.slice(0,-1),chatBot];}else{console.error(\"No chats available to update.\");}return prevChatsRender;});return;}fullText=dataFromServer.full_text;};clientRef.current.onerror=error=>{console.error('WebSocket error:',error);};clientRef.current.onclose=()=>{console.log('WebSocket connection closed');};};const fetchKnowledgeInBot=async()=>{try{const data=await getKnowledgeInBot(accessToken,botId);setKnowledges(data.knowledges);setIsLoading(false);}catch(error){console.error('Error fetching chat:',error.message);}};const toggleShowAddKnowledge=()=>{setShowAddKnowledge(!showAddKnowledge);if(showSideBar)toggleShowSidebar();};const handleChange=e=>{setPrompt(e.target.value);};const toggleShowSidebar=()=>{setShowSideBar(!showSideBar);};const handleSendMessage=async message=>{if(!isDone)return;setIsDone(false);const newMessage={query_id:uuidv4(),content:message,role:\"user\"};setChatsRender(prevChats=>[...prevChats,newMessage]);setIsProcess(true);const newChatBot={query_id:uuidv4(),content:\"\",role:\"bot\"};setChatsRender(prevChats=>[...prevChats,newChatBot]);try{const data=await createQueryBot(botId,chatId,message,accessToken);callAPIGenerationText(data);setIsProcess(false);}catch(error){console.error('Error creating bot:',error.message);}};const handleDeleteKnowledge=id=>{const newKnowledge=knowledges.filter(knowledge=>knowledge.knowledge_id!=id);setKnowledges(newKnowledge);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat_area \".concat(showContext?\"\":\"chat_area--full\"),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat_area__title\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Chat Interface\"}),/*#__PURE__*/_jsx(\"div\",{onClick:toggleShowSidebar,className:\"side_bar_ic\",children:/*#__PURE__*/_jsx(\"i\",{className:\"bi bi-layout-sidebar-reverse\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chat_area__message\",children:Array.from(chatsRender).map((chat,index)=>{return/*#__PURE__*/_jsx(ChatMessageItem,{totalTime:chat.totalTime,token:chat.token,ref:chatsRender.length-1===index?scrollTargetRef:null,message:!isDone&&index==chatsRender.length-1&&chat.role!=\"user\"?displayedText:chat.content,mySelf:chat.role==\"user\",isProcess:isProcess},chat.query_id+uuidv4());})}),knowledges.length==0?/*#__PURE__*/_jsx(\"div\",{className:\"message_noti\",children:/*#__PURE__*/_jsx(\"span\",{children:\"Vui l\\xF2ng th\\xEAm ki\\u1EBFn th\\u1EE9c cho t\\xF4i tr\\u01B0\\u1EDBc khi h\\u1ECFi.\"})}):/*#__PURE__*/_jsx(InputChat,{sendMessage:handleSendMessage}),/*#__PURE__*/_jsxs(\"div\",{className:\"side_bar__container \".concat(showSideBar?\"side_bar__container--show\":\"\",\" \"),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"side_bar_item__container\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"side_bar_item__title\",children:\"Persona & Prompt\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input_prompt\",children:/*#__PURE__*/_jsx(\"textarea\",{ref:textareaRef,placeholder:\"Design the bot's persona\",value:prompt,onChange:handleChange,rows:1})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"side_bar_item__container side_bar_item__container--max\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"side_bar_item__header\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"side_bar_item__title\",children:\"Danh s\\xE1ch ki\\u1EBFn th\\u1EE9c\"}),/*#__PURE__*/_jsx(\"div\",{onClick:toggleShowAddKnowledge,title:\"Add knowledge\",className:\"ic_add\",children:/*#__PURE__*/_jsx(\"i\",{className:\"bi bi-plus\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"knowledge__container\",children:Array.from(knowledges).map((knowledge,index)=>{return/*#__PURE__*/_jsxs(\"div\",{className:\"knowledge_item\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"knowledge_img\",children:/*#__PURE__*/_jsx(\"img\",{src:knowledgeImage,alt:\"\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"knowledge__content\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"knowledge_title\",children:knowledge.name}),/*#__PURE__*/_jsx(\"span\",{className:\"knowledge_description\",children:knowledge.description})]})]},knowledge.knowledge_id);})})]})]})]}),showAddKnowledge&&/*#__PURE__*/_jsx(SelectedKnowledgeModal,{botId:botId,deleteKnowledge:handleDeleteKnowledge,addKnowledge:setKnowledges,knowledges:knowledges,toggleShowModal:toggleShowAddKnowledge})]});}","map":{"version":3,"names":["InputChat","ChatMessageItem","useEffect","useRef","useState","knowledgeImage","SelectedKnowledgeModal","createQueryBot","getKnowledgeInBot","useParams","decryptToken","w3cwebsocket","W3CWebSocket","v4","uuidv4","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ChatArea","_ref","chats","fetChats","showContext","botId","chatId","showSideBar","setShowSideBar","prompt","setPrompt","textareaRef","showAddKnowledge","setShowAddKnowledge","accessToken","localStorage","getItem","knowledges","setKnowledges","isLoading","setIsLoading","urlServer","concat","clientRef","chatsRender","setChatsRender","isProcess","setIsProcess","isDone","setIsDone","scrollTargetRef","displayedText","setDisplayedText","tempText","setTempText","fetchKnowledgeInBot","console","log","transformedChats","Array","from","flatMap","chat","query_id","content","question","role","token","totalTime","answer","completion_token","total_time","current","style","height","scrollHeight","scrollIntoView","behavior","displayTextCharacterByCharacter","text","index","interval","setInterval","length","prev","charAt","clearInterval","callAPIGenerationText","query","onopen","send","JSON","stringify","fullText","onmessage","message","data","dataFromServer","parse","finish_reason","prevChatsRender","updatedChats","chatBot","slice","error","full_text","onerror","onclose","toggleShowAddKnowledge","toggleShowSidebar","handleChange","e","target","value","handleSendMessage","newMessage","prevChats","newChatBot","handleDeleteKnowledge","id","newKnowledge","filter","knowledge","knowledge_id","children","className","onClick","map","ref","mySelf","sendMessage","placeholder","onChange","rows","title","src","alt","name","description","deleteKnowledge","addKnowledge","toggleShowModal"],"sources":["/Users/huudan/Development/chatbot.com/fe/src/components/chat_area/ChatArea.js"],"sourcesContent":["import InputChat from \"../input_chat/InputChat\";\nimport \"./ChatArea.scss\";\nimport ChatMessageItem from \"../chat_message_item/ChatMessageItem\";\nimport {useEffect, useRef, useState} from \"react\";\nimport knowledgeImage from \"../../assets/images/dataset_text.png\";\nimport SelectedKnowledgeModal from \"../selected_knowledge_modal/SelectedKnowledgeModal\";\nimport {createQueryBot, getKnowledgeInBot} from \"../../services/ChatBotService\";\nimport {useParams} from \"react-router-dom\";\nimport {decryptToken} from \"../../utils/Functions\";\nimport {w3cwebsocket as W3CWebSocket} from \"websocket\";\nimport {v4 as uuidv4} from 'uuid';\n\n\nexport default function ChatArea({chats, fetChats, showContext}) {\n    const { botId, chatId } = useParams();\n    const [showSideBar, setShowSideBar] = useState(false);\n    const [prompt, setPrompt] = useState('');\n    const textareaRef = useRef(null);\n    const [showAddKnowledge, setShowAddKnowledge] = useState(false);\n    const accessToken = decryptToken(localStorage.getItem('access_token'));\n    const [knowledges, setKnowledges] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const urlServer = `ws://localhost:8068/ws/chats/${chatId}/generate_stream`;\n    const clientRef = useRef(null);\n    const [chatsRender, setChatsRender] = useState([]);\n    const [isProcess, setIsProcess] = useState(false);\n    const [isDone, setIsDone] = useState(true);\n    const scrollTargetRef = useRef(null);\n    const [displayedText, setDisplayedText] = useState('');\n    const [tempText, setTempText] = useState(\"\");\n    useEffect(() => {\n        fetchKnowledgeInBot();\n        // if (scrollTargetRef.current) {\n        //     scrollTargetRef.current.scrollIntoView({behavior: 'smooth'});\n        // }\n        console.log(\"CHATS\", chats)\n        // const transformedChats = Array.from(chats).map(chat => ({\n        //     query_id: chat.query_id,\n        //     content: chat.question.content,\n        //     role: chat.question.role\n        // }));\n        const transformedChats = Array.from(chats).flatMap(chat => [\n            {\n                query_id: chat.query_id,\n                content: chat.question.content,\n                role: chat.question.role,\n                token: 0,\n                totalTime: 0,\n            },\n            {\n                query_id: chat.query_id,\n                content: chat.answer.content,\n                role: \"bot\",\n                token: chat.answer.completion_token,\n                totalTime: chat.answer.total_time,\n                // role: chat.answer.role\n            }\n        ]);\n        setChatsRender(transformedChats);\n        if (textareaRef.current) {\n            // textareaRef.current.style.height = 'auto';\n            textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n        }\n    }, [chatId,chats]);\n    useEffect(() => {\n        if (scrollTargetRef.current) {\n            scrollTargetRef.current.scrollIntoView({behavior: 'smooth'});\n        }\n    }, [chats]);\n    const displayTextCharacterByCharacter = (text) => {\n        let index = -1;\n        setDisplayedText(\"\");\n        const interval = setInterval(() => {\n            if (index < text.length) {\n                setDisplayedText((prev) => prev + text.charAt(index));\n                index++;\n            } else {\n                clearInterval(interval);\n                setIsDone(true);\n                fetChats();\n                setDisplayedText(\"\");\n            }\n        }, 30);\n    };\n    const callAPIGenerationText = (query) => {\n        clientRef.current = new W3CWebSocket(urlServer);\n        clientRef.current.onopen = () => {\n            console.log('WebSocket connection opened');\n            clientRef.current.send(JSON.stringify(query));\n        };\n        let fullText = \"\";\n        clientRef.current.onmessage = (message) => {\n            console.log(\"Message received:\", message.data);\n            const dataFromServer = JSON.parse(message.data);\n            if(dataFromServer.finish_reason == 'stop') {\n                console.log(\"MMMMMMMMMMMMMMMMMM\", fullText);\n                displayTextCharacterByCharacter(fullText);\n                setChatsRender((prevChatsRender) => {\n                    if (prevChatsRender.length > 0) {\n                        const updatedChats = [...prevChatsRender];\n                        const chatBot = updatedChats[updatedChats.length - 1];\n                        chatBot.content = fullText;\n                        return [...prevChatsRender.slice(0, -1), chatBot];\n                    } else {\n                        console.error(\"No chats available to update.\");\n                    }\n                    return prevChatsRender;\n                });\n                return;\n            }\n            fullText = dataFromServer.full_text\n        };\n\n        clientRef.current.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        clientRef.current.onclose = () => {\n            console.log('WebSocket connection closed');\n        };\n    }\n\n    const fetchKnowledgeInBot = async () => {\n        try {\n            const data = await getKnowledgeInBot(accessToken, botId);\n            setKnowledges(data.knowledges);\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error fetching chat:', error.message);\n        }\n    };\n    const toggleShowAddKnowledge = () => {\n        setShowAddKnowledge(!showAddKnowledge);\n        if(showSideBar) toggleShowSidebar();\n    }\n    const handleChange = (e) => {\n        setPrompt(e.target.value);\n    };\n    const toggleShowSidebar = () => {\n        setShowSideBar(!showSideBar);\n    }\n    const handleSendMessage = async (message) => {\n        if (!isDone) return;\n        setIsDone(false);\n        const newMessage = {\n            query_id: uuidv4(),\n            content: message,\n            role: \"user\",\n        };\n        setChatsRender((prevChats) => [...prevChats, newMessage]);\n        setIsProcess(true);\n        const newChatBot = {\n            query_id: uuidv4(),\n            content: \"\",\n            role: \"bot\",\n        };\n        setChatsRender((prevChats) => [...prevChats, newChatBot]);\n        try {\n            const data = await createQueryBot(botId, chatId, message, accessToken);\n            callAPIGenerationText(data);\n            setIsProcess(false);\n        } catch (error) {\n            console.error('Error creating bot:', error.message);\n        }\n    }\n    const handleDeleteKnowledge = (id) => {\n        const newKnowledge = knowledges.filter(knowledge => knowledge.knowledge_id != id);\n        setKnowledges(newKnowledge);\n    }\n    return(\n        <>\n        <div className={`chat_area ${showContext ? \"\" : \"chat_area--full\"}`}>\n            <div className=\"chat_area__title\">\n                <span>Chat Interface</span>\n                <div onClick={toggleShowSidebar} className=\"side_bar_ic\">\n                    <i className=\"bi bi-layout-sidebar-reverse\"></i>\n                </div>\n            </div>\n            <div className=\"chat_area__message\">\n                {Array.from(chatsRender).map((chat, index)=> {\n                    return <ChatMessageItem totalTime={chat.totalTime} token={chat.token} ref={chatsRender.length - 1 === index ? scrollTargetRef : null}  key={chat.query_id + uuidv4()} message={!isDone && index == (chatsRender.length - 1) && chat.role!=\"user\" ? displayedText : chat.content} mySelf={chat.role==\"user\"} isProcess={isProcess}/>\n                })}\n            </div>\n            {knowledges.length == 0 ? <div className={\"message_noti\"}>\n                <span>Vui lòng thêm kiến thức cho tôi trước khi hỏi.</span>\n                </div> :  <InputChat sendMessage={handleSendMessage}/>}\n            <div className={`side_bar__container ${showSideBar ? \"side_bar__container--show\":\"\"} `}>\n                <div className=\"side_bar_item__container\">\n                    <span className=\"side_bar_item__title\">Persona & Prompt</span>\n                    <div className={\"input_prompt\"}><textarea ref={textareaRef} placeholder={\"Design the bot's persona\"} value={prompt} onChange={handleChange}\n                                                              rows={1}/></div>\n                </div>\n                <div className=\"side_bar_item__container side_bar_item__container--max\">\n                    <div className=\"side_bar_item__header\">\n                        <span className=\"side_bar_item__title\">Danh sách kiến thức</span>\n                        <div onClick={toggleShowAddKnowledge} title={\"Add knowledge\"} className=\"ic_add\">\n                            <i className=\"bi bi-plus\"></i>\n                        </div>\n                    </div>\n                    <div className=\"knowledge__container\">\n                        {Array.from(knowledges).map((knowledge, index)=> {\n                                return <div key={knowledge.knowledge_id} className=\"knowledge_item\">\n                                    <div className=\"knowledge_img\">\n                                        <img src={knowledgeImage} alt=\"\"/>\n                                    </div>\n                                    <div className=\"knowledge__content\">\n                                        <span className=\"knowledge_title\">{knowledge.name}</span>\n                                        <span className=\"knowledge_description\">{knowledge.description}</span>\n                                    </div>\n                                </div>\n                        })}\n                    </div>\n                </div>\n            </div>\n    </div>\n            {showAddKnowledge && <SelectedKnowledgeModal botId={botId} deleteKnowledge={handleDeleteKnowledge} addKnowledge={setKnowledges} knowledges={knowledges} toggleShowModal={toggleShowAddKnowledge}/>}\n        </>)\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}