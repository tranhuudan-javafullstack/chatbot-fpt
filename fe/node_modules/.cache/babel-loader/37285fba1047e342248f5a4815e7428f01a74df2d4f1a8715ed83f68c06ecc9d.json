{"ast":null,"code":"const initialState = {\n  username: '',\n  accessToken: '',\n  refreshToken: '',\n  userId: '',\n  email: \"\",\n  firstName: \"\",\n  lastName: \"\",\n  birtDate: \"\",\n  role: \"\",\n  gender: \"\",\n  avatar: \"\",\n  chats: [],\n  chatsRoom: [],\n  chatsPeople: [],\n  currentChat: null,\n  images: [],\n  avatarPeople: [],\n  avatarGroups: [],\n  nickNameGroups: [],\n  nickNamePeople: []\n};\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        accessToken: action.payload.accessToken,\n        refreshToken: action.payload.refreshToken\n      };\n    case 'SAVE_USER_INFO':\n      return {\n        ...state,\n        userId: action.payload.userId,\n        username: action.payload.username,\n        email: action.payload.email,\n        firstName: action.payload.firstName,\n        lastName: action.payload.lastName,\n        role: action.payload.role,\n        gender: action.payload.gender,\n        avatar: action.payload.avatar,\n        birtDate: action.payload.birtDate\n      };\n    // case 'SAVE_LIST_CHATS':\n    //     return {\n    //         ...state,\n    //         chats: action.payload,\n    //     }\n    // case 'CHANGE_CURRENT_CHAT':\n    //     let nameChat = action.payload.nameChat;\n    //     let type = action.payload.type;\n    //     let currentChatChoose = null;\n    //     if(type == 1){\n    //         const room= state.chatsRoom.find(room => room.name === nameChat);\n    //         currentChatChoose = room;\n    //         console.log(room+\"HELLO\")\n    //     }\n    //     if(type == 0){\n    //         const people= state.chatsPeople.find(people => people.name === nameChat);\n    //         if(people){\n    //             currentChatChoose = people;\n    //         }\n    //     }\n    //     return {\n    //         ...state,\n    //         currentChat: currentChatChoose,\n    //     }\n    // case 'UPDATE_CHATS':\n    //     // let isExist = false;\n    //     const updateChats = state.chatsRoom.map((room,index) => {\n    //         if(room.name === action.payload.name){\n    //             // isExist = true;\n    //             return action.payload;\n    //         }\n    //         return room;\n    //     });\n    //     // if(!isExist) updateChats.push(action.payload);\n    //     return {\n    //         ...state,\n    //         chatsRoom: updateChats,\n    //         currentChat: action.payload,\n    //     }\n    // case 'CLEAR_CURRENT_CHAT': {\n    //     return {\n    //         ...state,\n    //         currentChat: null,\n    //     }\n    // }\n    // case 'LOGOUT_SUCCESS':\n    //     return initialState;\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["initialState","username","accessToken","refreshToken","userId","email","firstName","lastName","birtDate","role","gender","avatar","chats","chatsRoom","chatsPeople","currentChat","images","avatarPeople","avatarGroups","nickNameGroups","nickNamePeople","userReducer","state","action","type","payload"],"sources":["/Users/huudan/Development/chatbot.com/fe/src/store/reducers/UserReducer.js"],"sourcesContent":["\nconst initialState = {\n    username: '',\n    accessToken: '',\n    refreshToken: '',\n    userId: '',\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    birtDate: \"\",\n    role: \"\",\n    gender: \"\",\n    avatar: \"\",\n    chats: [],\n    chatsRoom: [],\n    chatsPeople: [],\n    currentChat: null,\n    images: [],\n    avatarPeople: [],\n    avatarGroups: [],\n    nickNameGroups: [],\n    nickNamePeople: [],\n};\nexport default function userReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'LOGIN_SUCCESS':\n            return {\n                ...state,\n                accessToken: action.payload.accessToken,\n                refreshToken: action.payload.refreshToken,\n            };\n        case 'SAVE_USER_INFO':\n            return {\n                ...state,\n                userId: action.payload.userId,\n                username: action.payload.username,\n                email: action.payload.email,\n                firstName: action.payload.firstName,\n                lastName: action.payload.lastName,\n                role: action.payload.role,\n                gender: action.payload.gender,\n                avatar: action.payload.avatar,\n                birtDate: action.payload.birtDate,\n            }\n        // case 'SAVE_LIST_CHATS':\n        //     return {\n        //         ...state,\n        //         chats: action.payload,\n        //     }\n        // case 'CHANGE_CURRENT_CHAT':\n        //     let nameChat = action.payload.nameChat;\n        //     let type = action.payload.type;\n        //     let currentChatChoose = null;\n        //     if(type == 1){\n        //         const room= state.chatsRoom.find(room => room.name === nameChat);\n        //         currentChatChoose = room;\n        //         console.log(room+\"HELLO\")\n        //     }\n        //     if(type == 0){\n        //         const people= state.chatsPeople.find(people => people.name === nameChat);\n        //         if(people){\n        //             currentChatChoose = people;\n        //         }\n        //     }\n        //     return {\n        //         ...state,\n        //         currentChat: currentChatChoose,\n        //     }\n        // case 'UPDATE_CHATS':\n        //     // let isExist = false;\n        //     const updateChats = state.chatsRoom.map((room,index) => {\n        //         if(room.name === action.payload.name){\n        //             // isExist = true;\n        //             return action.payload;\n        //         }\n        //         return room;\n        //     });\n        //     // if(!isExist) updateChats.push(action.payload);\n        //     return {\n        //         ...state,\n        //         chatsRoom: updateChats,\n        //         currentChat: action.payload,\n        //     }\n        // case 'CLEAR_CURRENT_CHAT': {\n        //     return {\n        //         ...state,\n        //         currentChat: null,\n        //     }\n        // }\n        // case 'LOGOUT_SUCCESS':\n        //     return initialState;\n        default:\n            return state;\n    }\n}"],"mappings":"AACA,MAAMA,YAAY,GAAG;EACjBC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE,EAAE;EACfC,YAAY,EAAE,EAAE;EAChBC,MAAM,EAAE,EAAE;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,EAAE;EACbC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,EAAE;EACZC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,EAAE;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,EAAE;EACbC,WAAW,EAAE,EAAE;EACfC,WAAW,EAAE,IAAI;EACjBC,MAAM,EAAE,EAAE;EACVC,YAAY,EAAE,EAAE;EAChBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,EAAE;EAClBC,cAAc,EAAE;AACpB,CAAC;AACD,eAAe,SAASC,WAAWA,CAACC,KAAK,GAAGtB,YAAY,EAAEuB,MAAM,EAAE;EAC9D,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,eAAe;MAChB,OAAO;QACH,GAAGF,KAAK;QACRpB,WAAW,EAAEqB,MAAM,CAACE,OAAO,CAACvB,WAAW;QACvCC,YAAY,EAAEoB,MAAM,CAACE,OAAO,CAACtB;MACjC,CAAC;IACL,KAAK,gBAAgB;MACjB,OAAO;QACH,GAAGmB,KAAK;QACRlB,MAAM,EAAEmB,MAAM,CAACE,OAAO,CAACrB,MAAM;QAC7BH,QAAQ,EAAEsB,MAAM,CAACE,OAAO,CAACxB,QAAQ;QACjCI,KAAK,EAAEkB,MAAM,CAACE,OAAO,CAACpB,KAAK;QAC3BC,SAAS,EAAEiB,MAAM,CAACE,OAAO,CAACnB,SAAS;QACnCC,QAAQ,EAAEgB,MAAM,CAACE,OAAO,CAAClB,QAAQ;QACjCE,IAAI,EAAEc,MAAM,CAACE,OAAO,CAAChB,IAAI;QACzBC,MAAM,EAAEa,MAAM,CAACE,OAAO,CAACf,MAAM;QAC7BC,MAAM,EAAEY,MAAM,CAACE,OAAO,CAACd,MAAM;QAC7BH,QAAQ,EAAEe,MAAM,CAACE,OAAO,CAACjB;MAC7B,CAAC;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACI,OAAOc,KAAK;EACpB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}