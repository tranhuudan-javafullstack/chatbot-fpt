{"ast":null,"code":"import { ApiConstants } from \"../utils/Constants\";\nimport { json } from \"react-router-dom\";\nexport const getChatsBot = async (accessToken, botId) => {\n  try {\n    const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${accessToken}`\n      }\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(`${data.detail}`);\n    } else {\n      return data;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getChatsInBot = async (accessToken, botId, chatId) => {\n  try {\n    const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats/${chatId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${accessToken}`\n      }\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(`${data.detail}`);\n    } else {\n      return data;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\nexport const createChatBot = async (title, authToken, botId) => {\n  try {\n    const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        \"title\": title\n      })\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(`${data.detail}`);\n    } else {\n      return data;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\nexport const updateChatBot = async (title, authToken, botId, chatId) => {\n  try {\n    const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats/${chatId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        \"title\": title\n      })\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(`${data.detail}`);\n    } else {\n      return data;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\nexport const deleteChatBot = async (authToken, botId, chatId) => {\n  try {\n    const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats/${chatId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${authToken}`\n      }\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(`${data.detail}`);\n    } else {\n      return data;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n// queries\nexport const createQueryBot = async (botId, chatId, message, authToken) => {\n  try {\n    const res = await fetch(`${ApiConstants.chatQueries}/${botId}/chats/${chatId}/query`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        \"query\": message\n      })\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(`${data.detail}`);\n    } else {\n      return data;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n// knowledges\nexport const getKnowledgeInBot = async (accessToken, botId) => {\n  try {\n    const res = await fetch(`${ApiConstants.knowledgeBot}/${botId}/knowledges`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${accessToken}`\n      }\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(`${data.detail}`);\n    } else {\n      return data;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\nexport const addKnowledgeToBot = async (botId, knowledgeId, authToken) => {\n  try {\n    const res = await fetch(`${ApiConstants.knowledgeBot}/${botId}/knowledges`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        \"knowledge_id\": knowledgeId\n      })\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(`${data.detail}`);\n    } else {\n      return data;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\nexport const deleteKnowledgeToBot = async (botId, knowledgeId, authToken) => {\n  try {\n    const res = await fetch(`${ApiConstants.knowledgeBot}/${botId}/knowledges/${knowledgeId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${authToken}`\n      }\n    });\n    if (res.status != 204) {\n      throw new Error(`ERROR`);\n    } else {\n      return \"SUCCESSFUL\";\n    }\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["ApiConstants","json","getChatsBot","accessToken","botId","res","fetch","chatsBot","method","headers","authorization","data","ok","Error","detail","error","getChatsInBot","chatId","createChatBot","title","authToken","body","JSON","stringify","updateChatBot","deleteChatBot","createQueryBot","message","chatQueries","getKnowledgeInBot","knowledgeBot","addKnowledgeToBot","knowledgeId","deleteKnowledgeToBot","status"],"sources":["/Users/huudan/Development/chatbot.com/fe/src/services/ChatBotService.js"],"sourcesContent":["import {ApiConstants} from \"../utils/Constants\";\nimport {json} from \"react-router-dom\";\n\nexport const getChatsBot = async (accessToken, botId) => {\n    try {\n        const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${accessToken}`,\n            },\n        });\n        const data = await res.json();\n        if(!res.ok){\n            throw new Error(`${data.detail}`);\n        }else{\n            return data;\n        }\n    }catch (error) {\n        throw error;\n    }\n}\nexport const getChatsInBot = async (accessToken, botId, chatId) => {\n    try {\n        const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats/${chatId}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${accessToken}`,\n            },\n        });\n        const data = await res.json();\n        if(!res.ok){\n            throw new Error(`${data.detail}`);\n        }else{\n            return data;\n        }\n    }catch (error) {\n        throw error;\n    }\n}\nexport const createChatBot = async (title, authToken, botId) => {\n    try {\n        const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${authToken}`,\n            },\n            body: JSON.stringify({\n                \"title\": title,\n            })\n        });\n        const data = await res.json();\n        if(!res.ok){\n            throw new Error(`${data.detail}`);\n        }else{\n            return data;\n        }\n    }catch (error) {\n        throw error;\n    }\n}\nexport const updateChatBot = async (title, authToken, botId, chatId) => {\n    try {\n        const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats/${chatId}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${authToken}`,\n            },\n            body: JSON.stringify({\n                \"title\": title,\n            })\n        });\n        const data = await res.json();\n        if(!res.ok){\n            throw new Error(`${data.detail}`);\n        }else{\n            return data;\n        }\n    }catch (error) {\n        throw error;\n    }\n}\nexport const deleteChatBot = async (authToken, botId, chatId) => {\n    try {\n        const res = await fetch(`${ApiConstants.chatsBot}/${botId}/chats/${chatId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${authToken}`,\n            },\n        });\n        const data = await res.json();\n        if(!res.ok){\n            throw new Error(`${data.detail}`);\n        }else{\n            return data;\n        }\n    }catch (error) {\n        throw error;\n    }\n}\n// queries\nexport const createQueryBot = async (botId, chatId,message, authToken) => {\n    try {\n        const res = await fetch(`${ApiConstants.chatQueries}/${botId}/chats/${chatId}/query`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${authToken}`,\n            },\n            body: JSON.stringify({\n                \"query\": message,\n            })\n        });\n        const data = await res.json();\n        if(!res.ok){\n            throw new Error(`${data.detail}`);\n        }else{\n            return data;\n        }\n    }catch (error) {\n        throw error;\n    }\n}\n// knowledges\nexport const getKnowledgeInBot = async (accessToken, botId) => {\n    try {\n        const res = await fetch(`${ApiConstants.knowledgeBot}/${botId}/knowledges`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${accessToken}`,\n            },\n        });\n        const data = await res.json();\n        if(!res.ok){\n            throw new Error(`${data.detail}`);\n        }else{\n            return data;\n        }\n    }catch (error) {\n        throw error;\n    }\n}\nexport const addKnowledgeToBot = async (botId, knowledgeId, authToken) => {\n    try {\n        const res = await fetch(`${ApiConstants.knowledgeBot}/${botId}/knowledges`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${authToken}`,\n            },\n            body: JSON.stringify({\n                \"knowledge_id\": knowledgeId,\n            })\n        });\n        const data = await res.json();\n        if(!res.ok){\n            throw new Error(`${data.detail}`);\n        }else{\n            return data;\n        }\n    }catch (error) {\n        throw error;\n    }\n}\nexport const deleteKnowledgeToBot = async (botId, knowledgeId, authToken) => {\n    try {\n        const res = await fetch(`${ApiConstants.knowledgeBot}/${botId}/knowledges/${knowledgeId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                authorization: `Bearer ${authToken}`,\n            },\n        });\n        if(res.status != 204){\n            throw new Error(`ERROR`);\n        }else{\n            return \"SUCCESSFUL\";\n        }\n    }catch (error) {\n        throw error;\n    }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}